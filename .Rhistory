abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, col="green", lty=4)
lines(rtbyyear.top$year,rtbyyear.top$TomatoMeter, col="green",lwd=2)
twoord.plot(lx = mcbyyear.top$year, rx = imdbbyyear.top$year, ly = mcbyyear.top$metascore,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter",
xlab = "Year", main = "Average movie ratings of top 25 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2)
rtbyyear
twoord.plot(lx = rtbyyear.top$year, rx = imdbbyyear.top$year, ly = rtbyyear.top$tomatoMeter,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter",
xlab = "Year", main = "Average movie ratings of top 25 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2)
lines(mcbyyear.top$year,mcbyyear.top$metascore, col="green",lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, col="green", lty=4)
twoord.plot(lx = mcbyyear.top$year, rx = imdbbyyear.top$year, ly = mcbyyear.top$metascore,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 25 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2)
lines(rtbyyear.top$year,rtbyyear.top$TomatoMeter, col="green",lwd=2)
rt.top <- movie.df.final[ order(movie.df.final$year, -movie.df.final$tomatoMeter), ]
imdb.top <- movie.df.final[ order(movie.df.final$year, -movie.df.final$imdbRating),]
metascore.top <- movie.df.final[ order(movie.df.final$year, -movie.df.final$metascore),]
rt.splits<-split(rt.top,rt.top$year)
rt.df <-lapply(rt.splits,head,10)
rt.top <- do.call(rbind.data.frame,rt.df)
imdb.splits <- split(imdb.top,imdb.top$year)
imdb.df <- lapply(imdb.splits,head,10)
imdb.top <- do.call(rbind.data.frame,imdb.df)
mc.splits <- split(metascore.top, metascore.top$year)
mc.df <- lapply(mc.splits,head,10)
mc.top <- do.call(rbind.data.frame,mc.df)
rtbyyear.top <- aggregate(tomatoMeter ~ year, data=rt.top, mean)
imdbbyyear.top <- aggregate(imdbRating ~ year, data=imdb.top, mean)
mcbyyear.top <- aggregate(metascore ~ year, data=mc.top, mean)
rtbyyear.top <- rtbyyear.top[-c(35),]
imdbbyyear.top <- imdbbyyear.top[-c(35),]
mcbyyear.top <- mcbyyear.top[-c(35),]
twoord.plot(lx = mcbyyear.top$year, rx = imdbbyyear.top$year, ly = mcbyyear.top$metascore,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 15 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2)
lines(rtbyyear.top$year,rtbyyear.top$TomatoMeter, col="green",lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, col="green", lty=4)
rtbyyear.top
lines(rtbyyear.top$year,rtbyyear.top$tomatoMeter, col="green",lwd=2)
twoord.plot(lx = mcbyyear.top$year, rx = imdbbyyear.top$year, ly = mcbyyear.top$metascore,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2)
lines(rtbyyear.top$year,rtbyyear.top$tomatoMeter, col="green",lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, col="green", lty=4)
# line plot
twoord.plot(lx = rtbyyear$year, rx = imdbbyyear$year, ly = rtbyyear$tomatoMeter,
ry = imdbbyyear$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings",  xlim=c(1980,2015)
,type=c("l","l"), lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, lty=4, col="green")
lines(metascorebyyear$year,metascorebyyear$metascore, col="green",lwd=2)
legend(2005,95,c("RT","IMDb","MC"),lty=c(1,1),lwd=c(2,2),col=c("black","red","green"))
twoord.plot(lx = mcbyyear.top$year, rx = imdbbyyear.top$year, ly = mcbyyear.top$metascore,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2)
lines(rtbyyear.top$year,rtbyyear.top$tomatoMeter, col="green",lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, col="green", lty=4)
twoord.plot(lx = mcbyyear.top$year, rx = imdbbyyear.top$year, ly = mcbyyear.top$metascore,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2, lcol="blue", rcol="black")
lines(rtbyyear.top$year,rtbyyear.top$tomatoMeter, col="red",lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, col="green", lty=4)
legend(2005,95,c("RT","IMDb","MC"),lty=c(1,1),lwd=c(2,2),col=c("red","black","green"))
legend(2001,82,c("RT","IMDb","MC"),lty=c(1,1),lwd=c(2,2),col=c("red","black","green"))
twoord.plot(lx = mcbyyear.top$year, rx = imdbbyyear.top$year, ly = mcbyyear.top$metascore,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2, lcol="blue", rcol="green")
lines(rtbyyear.top$year,rtbyyear.top$tomatoMeter, col="red",lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, col="green", lty=4)
twoord.plot(lx = rtybyyear.top$year, rx = imdbbyyear.top$year, ly = rtbyyear.top$tomatoMeter,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2, lcol="blue", rcol="green", lylim=c(67,100))
twoord.plot(lx = rtbyyear.top$year, rx = imdbbyyear.top$year, ly = rtbyyear.top$tomatoMeter,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2, lcol="blue", rcol="green", lylim=c(67,100))
lines(mcbyyear.top$year,mcbyyear.top$metascore, col="red",lwd=2)
twoord.plot(lx = rtbyyear.top$year, rx = imdbbyyear.top$year, ly = rtbyyear.top$tomatoMeter,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2, lcol="blue", rcol="green", lylim=c(65,100))
lines(mcbyyear.top$year,mcbyyear.top$metascore, col="red",lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, col="green", lty=4)
twoord.plot(lx = rtbyyear.top$year, rx = imdbbyyear.top$year, ly = rtbyyear.top$tomatoMeter,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2, lcol="blue", rcol="green")
lines(mcbyyear.top$year,mcbyyear.top$metascore, col="red",lwd=2)
twoord.plot(lx = mcbyyear.top$year, rx = imdbbyyear.top$year, ly = mcbyyear.top$metascore,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2, lcol="blue", rcol="green", lylim=c(65,100))
lines(rtbyyear.top$year,rtbyyear.top$tomatoMeter, col="red",lwd=2)
twoord.plot(lx = mcbyyear$year, rx = imdbbyyear$year, ly = mcbyyear$metascore,
ry = imdbbyyear$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings",  xlim=c(1980,2015)
,type=c("l","l"), lwd=2)
twoord.plot(lx = metascorebyyear$year, rx = imdbbyyear$year, ly = metascorebyyear$metascore,
ry = imdbbyyear$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings",  xlim=c(1980,2015)
,type=c("l","l"), lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, lty=4, col="green")
lines(rtbyyear$year,rtbyyear$tomatoMeter, col="green",lwd=2)
legend(2005,95,c("RT","IMDb","MC"),lty=c(1,1),lwd=c(2,2),col=c("black","red","green"))
twoord.plot(lx = metascorebyyear$year, rx = imdbbyyear$year, ly = metascorebyyear$metascore,
ry = imdbbyyear$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings",  xlim=c(1980,2015)
,type=c("l","l"), lwd=2, lylim=c(45,100))
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, lty=4, col="green")
lines(rtbyyear$year,rtbyyear$tomatoMeter, col="green",lwd=2)
twoord.plot(lx = metascorebyyear$year, rx = imdbbyyear$year, ly = metascorebyyear$metascore,
ry = imdbbyyear$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings",  xlim=c(1980,2015)
,type=c("l","l"), lwd=2, lylim=c(50,100))
abline(v=1998, lty=4)
twoord.plot(lx = metascorebyyear$year, rx = imdbbyyear$year, ly = metascorebyyear$metascore,
ry = imdbbyyear$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings",  xlim=c(1980,2015)
,type=c("l","l"), lwd=2, lylim=c(47,100))
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, lty=4, col="green")
lines(rtbyyear$year,rtbyyear$tomatoMeter, col="green",lwd=2)
legend(2005,95,c("RT","IMDb","MC"),lty=c(1,1),lwd=c(2,2),col=c("black","red","green"))
twoord.plot(lx = mcbyyear.top$year, rx = imdbbyyear.top$year, ly = mcbyyear.top$metascore,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2, lcol="blue", rcol="green", lylim=c(65,100))
lines(rtbyyear.top$year,rtbyyear.top$tomatoMeter, col="red",lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, col="green", lty=4)
legend(2001,82,c("RT","IMDb","MC"),lty=c(1,1),lwd=c(2,2),col=c("red","green","blue"))
twoord.plot(lx = metascorebyyear$year, rx = imdbbyyear$year, ly = metascorebyyear$metascore,
ry = imdbbyyear$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings",  xlim=c(1980,2015)
,type=c("l","l"), lwd=2, lylim=c(47,100),lcol="blue", rcol="green",)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, lty=4, col="green")
lines(rtbyyear$year,rtbyyear$tomatoMeter, col="green",lwd=2)
legend(2005,95,c("RT","IMDb","MC"),lty=c(1,1),lwd=c(2,2),col=c("black","red","green"))
twoord.plot(lx = metascorebyyear$year, rx = imdbbyyear$year, ly = metascorebyyear$metascore,
ry = imdbbyyear$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings",  xlim=c(1980,2015)
,type=c("l","l"), lwd=2, lylim=c(47,100),lcol="blue", rcol="green",)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, lty=4, col="green")
lines(rtbyyear$year,rtbyyear$tomatoMeter, col="red",lwd=2)
legend(2005,95,c("RT","IMDb","MC"),lty=c(1,1),lwd=c(2,2),col=c("black","red","green"))
# chart only top movies
legend(2005,95,c("RT","IMDb","MC"),lty=c(1,1),lwd=c(2,2),col=c("red","green","blue"))
twoord.plot(lx = mcbyyear.top$year, rx = imdbbyyear.top$year, ly = mcbyyear.top$metascore,
ry = imdbbyyear.top$imdbRating, rylab = "IMDb Rating", ylab = "TomatoMeter and Metascore",
xlab = "Year", main = "Average movie ratings of top 12 rated movies", xlim=c(1980,2015),
type=c("l","l"), lwd=2, lcol="blue", rcol="green", lylim=c(65,100))
lines(rtbyyear.top$year,rtbyyear.top$tomatoMeter, col="red",lwd=2)
abline(v=1998, lty=4)
abline(v=1996, col="red", lty=4)
abline(v=1999, col="green", lty=4)
legend(2001,82,c("RT","IMDb","MC"),lty=c(1,1),lwd=c(2,2),col=c("red","green","blue"))
speeds <- read.csv("vpn.speed.tests.csv", header=TRUE, sep=",")
speeds$VPN <- relevel(speeds$VPN, ref="No VPN")
speeds$VPN <- relevel(speeds$VPN, ref="LiquidVPN") #replace with VPN being tested
omit.novpn <- tail(which(speeds$Location=="None"), 7)
speeds <- speeds[-omit.novpn,]
boxplot(Download.time..seconds. ~ VPN, data=speeds, col="lightblue",
ylab="Seconds", xlab="VPN", main="Download times (82.7 MB compressed file)",
outline=F)
means <- tapply(speeds$Download.time..seconds., speeds$VPN, mean)
points(means,col="red",pch=18)
omit <- which(speeds$VPN == "OneVPN")
speeds <- speeds[-omit,]
speeds$VPN <- factor(speeds$VPN)
omit <- which(speeds$VPN == "Tiger")
speeds <- speeds[-omit,]
speeds$VPN <- factor(speeds$VPN)
boxplot(Download.time..seconds. ~ VPN, data=speeds, col="lightblue",
ylab="Seconds", xlab="VPN", main="Download times (82.7 MB compressed file)",
outline=F)
means <- tapply(speeds$Download.time..seconds., speeds$VPN, mean)
points(means,col="red",pch=18)
speeds$VPN <- relevel(speeds$VPN, ref="No VPN")
omit <- which(speeds$VPN == "Buffered")
speeds <- speeds[-omit,]
speeds$VPN <- factor(speeds$VPN)
boxplot(Download.time..seconds. ~ VPN, data=speeds, col="lightblue",
ylab="Seconds", xlab="VPN", main="Download times (82.7 MB compressed file)",
outline=F)
means <- tapply(speeds$Download.time..seconds., speeds$VPN, mean)
points(means,col="red",pch=18)
png("vpn speed test.png", width=800, height=600, units="px")
boxplot(Download.time..seconds. ~ VPN, data=speeds, col="lightblue",
ylab="Seconds", xlab="VPN", main="Download times (82.7 MB compressed file)",
outline=F)
means <- tapply(speeds$Download.time..seconds., speeds$VPN, mean)
points(means,col="red",pch=18)
dev.off()
airbnb <- html(https://www.airbnb.com/rooms/13266284?checkin=11%2F18%2F2016&checkout=11%2F21%2F2016&guests=1)
airbnb <- html("https://www.airbnb.com/rooms/13266284?checkin=11%2F18%2F2016&checkout=11%2F21%2F2016&guests=1")
airbnb <- read_html("https://www.airbnb.com/rooms/13266284?checkin=11%2F18%2F2016&checkout=11%2F21%2F2016&guests=1")
library(rvest)
airbnb <- read_html("https://www.airbnb.com/rooms/13266284?checkin=11%2F18%2F2016&checkout=11%2F21%2F2016&guests=1")
airbnb %>%
html_node(".location-panel") %>%
html_attrs()
airbnb %>%
html_node("neighborhood") %>%
html_attrs()
airbnb %>%
html_nodes(doc, xpath = "//*[@id="neighborhood"]/div/div/div[1]/img"))
airbnb %>%
html_nodes(doc, xpath = '//*[@id="neighborhood"]/div/div/div[1]/img'))
airbnb %>%
html_nodes(xpath = '//*[@id="neighborhood"]/div/div/div[1]/img'))
airbnb %>%
html_nodes(xpath = '//*[@id="neighborhood"]/div/div/div[1]/img')
airbnb %>%
html_nodes(xpath = '//*[@id="neighborhood"]/div/div/div[1]/img') %>%
html_attr('src')
airbnb %>%
html_nodes(xpath = '//*[@id="neighborhood"]/div/div/div[1]/img') %>%
html_text()
airbnb
airbnb %>%
html_node(xpath = '//*[@id="neighborhood"]/div/div/div[1]/img') %>%
html_attr(src)
airbnb %>%
html_node(xpath = '//*[@id="neighborhood"]/div/div/div[1]/img') %>%
html_attr('src')
airbnb %>%
html_node(xpath = '//*[@id="neighborhood"]/div/div/div[1]/img') %>%
html_attr('src')
airbnb %>%
html_nodes(xpath = '//*[@id="neighborhood"]/div/div/div[1]/img') %>%
html_attr('src')
airbnb %>%
html_nodes(xpath = '//*[@id="neighborhood"]/div/div/div[1]/img') %>%
html_attr('src')
airbnbn
airbnb
require(XML)
airbnb <- read_html("https://www.airbnb.com/rooms/13266284?checkin=11%2F18%2F2016&checkout=11%2F21%2F2016&guests=1")
imgsrc <- airbnb %>%
html_nodes(xpath = '//*[@id="neighborhood"]/div/div/div[1]/img')
imgsrc
print(airbnb)
airbnb[2]
airbnb
class(airbnb)
grep("offset_",airbnb)
grep("offset_",airbnb[2])
grep("img",airbnb[2])
install.packages("RCurl")
library(RCurl)
airbnb.source <- html(airbnb.url)
airbnb.source <- getURLContent(airbnb.url)
airbnb.url <- "https://www.airbnb.com/rooms/13266284?checkin=11%2F18%2F2016&checkout=11%2F21%2F2016&guests=1"
airbnb.source <- getURLContent(airbnb.url)
airbnb.source
class(airbnb.source)
grep("offset_",airbnb.source)
grep("googleapis",airbnb.source)
grep("offset_",airbnb.source)
airbnb.lines <- strsplit(airbnb.source, ";")
grep("offset_",airbnb.lines)
coords.lines <- airbnb.lines[grep("offset_",airbnb.lines)]
airbnb.lines
grep("offset_",airbnb.lines)
coords.lines <- airbnb.lines[grepl("offset_",airbnb.lines)==T]
str(coords.lines)
head(airbnb.lines)
airbnb.lines <- strsplit(airbnb.source, ";")
airbnb.lines[1]
airbnb.lines[1,1]
airbnb.lines[[1]]
dim(airbnb.lines)
class(airbnb.source)
class(airbnb.lines)
do.call(rbind.data.frame, airbnb.lines)
airbnb.df <- do.call(rbind.data.frame, airbnb.lines)
dim(airbnb.df)
grep("offset_",airbnb.df)
head(airbnb.df)
airbnb.df <- do.call(cbind.data.frame, airbnb.lines)
head(airbnb.df)
grep("offset_",airbnb.df)
grep("offset",airbnb.df)
grep("create",airbnb.df)
class(airbnb.df)
class(airbnb.df[1])
class(airbnb.df[1,1])
class(airbnb.df[1,])
airbnb.df <- as.character(airbnb.df[1,])
dim(airbnb.df)
airbnb.df <- do.call(cbind.data.frame, airbnb.lines)
bob[] <- lapply(airbnb.df, as.character)
airbnb.df[] <- lapply(airbnb.df, as.character)
class(airbnb.df[1,1])
grep("offset_",airbnb.df)
grep("offset_",airbnb.df[,1])
coords.lines <- airbnb.df[,grep("offset_",airbnb.df[,1])]
coords.lines <- airbnb.df[1,grep("offset_",airbnb.df[,1])]
airbnb.df[7867]
airbnb.df[7867,]
coords.lines <- airbnb.df[grep("offset_",airbnb.df[,1]),]
coords.lines
airbnb.df[7868,]
coords.lines <- airbnb.df[grep("offset_",airbnb.df[,1])+1,]
coords.lines
library(shiny)
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
class(coords.lines)
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
library(shiny)
runExample("08_html")
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
install.packages("stringr")
testcoords <- str_extract(coords.lines, "-*[0-9]+\.[0-9]+")
testcoords <- str_extract(coords.lines, "-*[0-9]+\\.[0-9]+")
library(stringr)
testcoords <- str_extract(coords.lines, "-*[0-9]+\\.[0-9]+")
testcoords
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
testcoords <- str_extract(coords.lines, "-*[0-9]+\\.[0-9]+")
library(RCurl)
library(stringr)
testcoords <- str_extract(coords.lines, "-*[0-9]+\\.[0-9]+")
testcoords
shiny::runApp('nearbnb')
formatcoords <- paste("{lat:",testcoords[1],",lng:"sep="",testcoords[2],sep="")
formatcoords <- paste("{lat:",testcoords[1],",lng:",testcoords[2],sep="")
formatcoords
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
latitude <- testcoords[1]
latitude
shiny::runApp('nearbnb')
latitude <- testcoords[1]
latitude
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
shiny::runApp('nearbnb')
install.packages("plotly")
library(plotly)
x <- c('Product A', 'Product B', 'Product C')
y <- c(20, 14, 23)
text <- c('27% market share', '24% market share', '19% market share')
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "January 2013 Sales Report",
xaxis = list(title = ""),
yaxis = list(title = ""))
# Create a shareable link to your chart
p
library(plotly)
x <- c('Product A', 'Product B', 'Product C')
y <- c(20, 14, 23)
text <- c('27% market share', '24% market share', '19% market share')
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "January 2013 Sales Report",
xaxis = list(title = ""),
yaxis = list(title = ""))
p
getwd()
dat <- read.csv("NetflixTitlesbyCountry.csv", header=FALSE, sep=",")
View(dat)
dat <- read.csv("NetflixTitlesbyCountry.csv", header=TRUE, sep=",")
View(dat)
barplot(dat)
barplot(as.matrix(dat))
mat <- as.matrix(dat)
View(mat)
mat[1,]
mat[,1]
barplot(mat, names.arg=mat[,1])
View(mat)
barplot(mat[2:3,], names.arg=mat[,1])
mat[2:3,]
barplot(mat$TV, names.arg=mat[,1])
barplot(dat$TV, names.arg=dat$country)
counts <- table(dat$TV, dat$Movies)
barplot(counts, names.arg=dat$country)
counts <- table(dat$TV, dat$Movies)
barplot(counts, names.arg=dat$country, main="Unique Netflix Titles by Country",
xlab="Country", ylab="# of unique titles")
counts
barplot(dat$TV, names.arg=dat$country, main="Unique Netflix Titles by Country",
xlab="Country", ylab="# of unique titles")
barplot(dat$TV, names.arg=dat$country, main="Unique Netflix Titles by Country",
ylab="# of unique titles")
head(dat)
barplot(dat$TV, names.arg=dat$Country, main="Unique Netflix Titles by Country",
xlab="Country", ylab="# of unique titles")
install.packages(reshape2)
library(lattice)
barchart(TV+Movies~Country, data=dat)
dat <- read.csv("NetflixTitlesbyCountrytop10.csv", header=TRUE, sep=",")
barchart(TV+Movies~Country, data=dat, main="Unique Netflix Titles by Country",
xlab="Country", ylab="# of unique titles")
dat <- dat[order(Total),]
dat$Total
attach(dat)
dat <- dat[order(Total),]
detach(dat)
barchart(TV+Movies~Country, data=dat, main="Unique Netflix Titles by Country",
xlab="Country", ylab="# of unique titles")
dat
attach(dat)
dat <- dat[order(Total),]
detach(dat)
barchart(TV+Movies~Country, data=dat, main="Unique Netflix Titles by Country",
xlab="Country", ylab="# of unique titles")
dat <- dat[with(dat, order(Total)), ]
dat
dat <- dat[with(dat, order(Total)), ]
dat <- dat[with(dat, order(-Total)), ]
dat
barchart(TV+Movies~Country, data=dat, main="Unique Netflix Titles by Country",
xlab="Country", ylab="# of unique titles")
dat$Country <- factor(dat$Country, levels=unique( as.character(dat$Country) ) )
barchart(TV+Movies~Country, data=dat, main="Unique Netflix Titles by Country",
xlab="Country", ylab="# of unique titles")
barchart(TV+Movies~Country, data=dat, main="Unique Netflix Titles by Country",
xlab="Country", ylab="# of unique titles", stack=T)
png("netflixbycountry.png", width=800, height=600, units="px")
barchart(TV+Movies~Country, data=dat, main="Unique Netflix Titles by Country",
xlab="Country", ylab="# of unique titles", stack=T)
dev.off()
barchart(TV+Movies~Country, data=dat, main="Unique Netflix Titles by Country",
xlab="Top 10 countries by # of subscribers", ylab="# of unique titles", stack=T)
png("netflixbycountry.png", width=800, height=600, units="px")
barchart(TV+Movies~Country, data=dat, main="Unique Netflix Titles by Country",
xlab="Top 10 countries by # of subscribers", ylab="# of unique titles", stack=T)
dev.off()
shiny::runApp('nearbnb')
library(rsconnect)
rsconnect::setAccountInfo(name='pabischoff', token='29275E0587D4EBA2452FE2FB4D0DDEE4', secret='eRIP0kTfcAHPB8QyNAARlodNW1G6sN3xv1ZgusuO')
deployApp()
getwd()
setwd("nearbnb")
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
